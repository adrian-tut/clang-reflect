// -*- C++ -*-

#ifndef CPPX_META
#define CPPX_META

#include <cstddef>
#include <cstdint>

namespace std
{

template<std::size_t I, typename T>
struct variant_alternative_t;  

};

namespace cppx
{
namespace meta
{
inline namespace v1
{

// TODO: Keep this in sync with the compiler.
enum construct_kind {
  null_construct,

  translation_unit,
  namespace_decl,
  variable_decl,
  function_decl,
  parameter_decl,
  class_decl,
  union_decl,
  member_variable_decl,
  member_function_decl,
  constructor_decl,
  destructor_decl,
  conversion_decl,
  enum_decl,
  enumerator_decl,
  access_spec,

  void_type,
  character_type,
  integral_type,
  floating_point_type,
  reference_type,
  function_type,
  pointer_type,
  array_type,
};

namespace __detail {

// WARNING: Do not modify the layout of this class or its private constructors
// unless you also plan to modify the compiler. In other words, do not touch.
struct meta_data
{
  constexpr meta_data() 
    : category(null_construct), handle() 
  { }
  
  unsigned category;
  std::uintptr_t handle;
};

} // namespace __detail

// -------------------------------------------------------------------------- //
// Declarations

/// Compile-time information about a translation unit.
class translation_info {
  __detail::meta_data m;

  friend class meta_info;

  constexpr translation_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a namespace.
class namespace_info {
  __detail::meta_data m;

  friend class meta_info;

  namespace_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a variable.
class variable_info {
  __detail::meta_data m;

  friend class meta_info;

  variable_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a function.
class function_info {
  __detail::meta_data m;

  friend class meta_info;

  function_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a class.
class class_info {
  __detail::meta_data m;

  friend class meta_info;

  class_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a union.
class union_info {
  __detail::meta_data m;

  friend class meta_info;

  union_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a member variable.
class member_variable_info {
  __detail::meta_data m;

  friend class meta_info;

  member_variable_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a member function.
class member_function_info {
  __detail::meta_data m;

  friend class meta_info;

  member_function_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a constructor.
class constructor_info {
  __detail::meta_data m;

  friend class meta_info;

  constructor_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a destructor.
class destructor_info {
  __detail::meta_data m;

  friend class meta_info;

  destructor_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a conversion function.
class conversion_info {
  __detail::meta_data m;

  friend class meta_info;

  conversion_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about a class.
class enum_info {
  __detail::meta_data m;

  friend class meta_info;

  enum_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about an enumerator.
class enumerator_info {
  __detail::meta_data m;

  friend class meta_info;

  enumerator_info(__detail::meta_data m) : m(m) { }
public:
};

/// Compile-time information about an access specifier.
class access_info {
  __detail::meta_data m;

  friend class meta_info;

  access_info(__detail::meta_data m) : m(m) { }
public:
};


// -------------------------------------------------------------------------- //
// Types

/// Compile-time information about the void type...
///
/// FIXME: this does not seem particularly useful.
class void_type_info {
  __detail::meta_data m;
public:
};

/// Compile-time information about an integral type.
class integral_type_info {
  __detail::meta_data m;
public:
};

/// Compile-time information about a floating point type.
class floating_point_type_info {
  __detail::meta_data m;
public:
};

/// Compile-time information about a reference type.
class reference_type_info {
  __detail::meta_data m;
public:
};

/// Compile-time information about a function type.
class function_type_info {
  __detail::meta_data m;
public:
};

/// Compile-time information about a pointer type.
class pointer_type_info {
  __detail::meta_data m;
public:
};

/// Compile-time information about a array type.
class array_type_info {
  __detail::meta_data m;
public:
};

// -------------------------------------------------------------------------- //
// Variant
/// The primary interface to reflection. This models the read-only version of
/// the concept inherent in std::variant.
class meta_info 
{
  __detail::meta_data m;
public:
  /// Default construct a null reflection.
  constexpr meta_info() = default;

  /// Returns the construct discriminator.
  immediate std::size_t index() const noexcept { 
    return __reflect_index(m); 
  }

  // This is never valueless.
  constexpr bool valueless_by_exception() const noexcept { 
    return false; 
  }

  // constexpr translation_info get_translation_unit() {
  //   return translation_info{m};
  // }
};

} // inline namespace v1
} // namespace meta
} // namespace cppx



#endif // CPPX_META
